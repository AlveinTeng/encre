import { nanoid, customAlphabet, customRandom } from 'nanoid';
import { RecordId } from '../load/keymap';

/**
 * Class that provides Ids that are generated by nanoid.
 */
export class IdProvider {
  private _alphabet =
    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz@';

  constructor(alphabet?: string) {
    this._alphabet = alphabet ?? this._alphabet;
  }

  static async imports(): Promise<{
    nanoid: typeof nanoid;
    customAlphabet: typeof customAlphabet;
    customRandom: typeof customRandom;
  }> {
    try {
      const { nanoid, customAlphabet, customRandom } = await import('nanoid');

      return { nanoid, customAlphabet, customRandom };
    } catch (e) {
      console.error(e);
      throw new Error('Failed to load nanoid. Please install nanoid.');
    }
  }

  public async provideNanoId(size: number = 17): Promise<string> {
    const { customAlphabet } = await IdProvider.imports();
    // const { customAlphabet } = await this._nanoId();

    const nanoid = customAlphabet(this._alphabet, size);

    return nanoid();
  }
}

export function getRecordId(): RecordId {
  const _alphabet =
    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz@';
  const nanoid = customAlphabet(_alphabet, 17);

  return nanoid() as RecordId;
}
